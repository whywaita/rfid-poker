// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: card.sql

package query

import (
	"context"
)

const addCard = `-- name: AddCard :one
INSERT INTO card (suit, rank, is_board) VALUES (?, ?, ?) RETURNING id
`

type AddCardParams struct {
	Suit    string
	Rank    string
	IsBoard bool
}

func (q *Queries) AddCard(ctx context.Context, arg AddCardParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, addCard, arg.Suit, arg.Rank, arg.IsBoard)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCard = `-- name: GetCard :one
SELECT id, suit, rank, is_board FROM card WHERE id = ?
`

func (q *Queries) GetCard(ctx context.Context, id int64) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCard, id)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Suit,
		&i.Rank,
		&i.IsBoard,
	)
	return i, err
}

const getCardByRankSuit = `-- name: GetCardByRankSuit :one
SELECT id, suit, rank, is_board FROM card WHERE rank = ? AND suit = ?
`

type GetCardByRankSuitParams struct {
	Rank string
	Suit string
}

func (q *Queries) GetCardByRankSuit(ctx context.Context, arg GetCardByRankSuitParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, getCardByRankSuit, arg.Rank, arg.Suit)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Suit,
		&i.Rank,
		&i.IsBoard,
	)
	return i, err
}
