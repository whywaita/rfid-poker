// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: hand.sql

package query

import (
	"context"
	"database/sql"
)

const addHand = `-- name: AddHand :one
INSERT INTO hand (player_id, is_muck)
VALUES (?, false)
RETURNING id, player_id, equity, is_muck
`

func (q *Queries) AddHand(ctx context.Context, playerID int64) (Hand, error) {
	row := q.db.QueryRowContext(ctx, addHand, playerID)
	var i Hand
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Equity,
		&i.IsMuck,
	)
	return i, err
}

const deleteHandAll = `-- name: DeleteHandAll :exec
DELETE FROM hand
`

func (q *Queries) DeleteHandAll(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteHandAll)
	return err
}

const getHand = `-- name: GetHand :one
SELECT id, player_id, equity FROM hand WHERE id = ? LIMIT 1
`

type GetHandRow struct {
	ID       int64
	PlayerID int64
	Equity   sql.NullFloat64
}

func (q *Queries) GetHand(ctx context.Context, id int64) (GetHandRow, error) {
	row := q.db.QueryRowContext(ctx, getHand, id)
	var i GetHandRow
	err := row.Scan(&i.ID, &i.PlayerID, &i.Equity)
	return i, err
}

const getHandBySerial = `-- name: GetHandBySerial :one
SELECT
    hand.id AS hand_id,
    antenna.player_id,
    equity
FROM hand JOIN antenna ON antenna.player_id = hand.player_id
WHERE antenna.serial = ?
`

type GetHandBySerialRow struct {
	HandID   int64
	PlayerID sql.NullInt64
	Equity   sql.NullFloat64
}

func (q *Queries) GetHandBySerial(ctx context.Context, serial string) (GetHandBySerialRow, error) {
	row := q.db.QueryRowContext(ctx, getHandBySerial, serial)
	var i GetHandBySerialRow
	err := row.Scan(&i.HandID, &i.PlayerID, &i.Equity)
	return i, err
}

const getHandNotMucked = `-- name: GetHandNotMucked :many
SELECT id, player_id, equity FROM hand WHERE is_muck = false
`

type GetHandNotMuckedRow struct {
	ID       int64
	PlayerID int64
	Equity   sql.NullFloat64
}

func (q *Queries) GetHandNotMucked(ctx context.Context) ([]GetHandNotMuckedRow, error) {
	rows, err := q.db.QueryContext(ctx, getHandNotMucked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHandNotMuckedRow
	for rows.Next() {
		var i GetHandNotMuckedRow
		if err := rows.Scan(&i.ID, &i.PlayerID, &i.Equity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const muckHand = `-- name: MuckHand :exec
UPDATE hand SET is_muck = true WHERE id = ?
`

func (q *Queries) MuckHand(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, muckHand, id)
	return err
}

const updateEquity = `-- name: UpdateEquity :exec
UPDATE hand SET equity = ? WHERE id = ?
`

type UpdateEquityParams struct {
	Equity sql.NullFloat64
	ID     int64
}

func (q *Queries) UpdateEquity(ctx context.Context, arg UpdateEquityParams) error {
	_, err := q.db.ExecContext(ctx, updateEquity, arg.Equity, arg.ID)
	return err
}
