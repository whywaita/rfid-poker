// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: antenna.sql

package query

import (
	"context"
	"database/sql"
)

const addNewAntenna = `-- name: AddNewAntenna :exec
INSERT INTO antenna (serial, antenna_type_id)
VALUES (?, ?)
`

type AddNewAntennaParams struct {
	Serial        string
	AntennaTypeID int32
}

func (q *Queries) AddNewAntenna(ctx context.Context, arg AddNewAntennaParams) error {
	_, err := q.db.ExecContext(ctx, addNewAntenna, arg.Serial, arg.AntennaTypeID)
	return err
}

const deleteAntennaByID = `-- name: DeleteAntennaByID :exec
DELETE FROM antenna WHERE id = ?
`

func (q *Queries) DeleteAntennaByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAntennaByID, id)
	return err
}

const getAntenna = `-- name: GetAntenna :many
SELECT antenna.id, serial, antenna_type_id, player_id, antenna_type.name AS antenna_type_name
FROM antenna
JOIN antenna_type ON antenna_type.id = antenna.antenna_type_id
`

type GetAntennaRow struct {
	ID              int32
	Serial          string
	AntennaTypeID   int32
	PlayerID        sql.NullInt32
	AntennaTypeName string
}

func (q *Queries) GetAntenna(ctx context.Context) ([]GetAntennaRow, error) {
	rows, err := q.db.QueryContext(ctx, getAntenna)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAntennaRow
	for rows.Next() {
		var i GetAntennaRow
		if err := rows.Scan(
			&i.ID,
			&i.Serial,
			&i.AntennaTypeID,
			&i.PlayerID,
			&i.AntennaTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAntennaById = `-- name: GetAntennaById :one
SELECT antenna.id, serial, antenna_type_id, player_id, antenna_type.name AS antenna_type_name
FROM antenna
JOIN antenna_type ON antenna_type.id = antenna.antenna_type_id
WHERE antenna.id = ?
`

type GetAntennaByIdRow struct {
	ID              int32
	Serial          string
	AntennaTypeID   int32
	PlayerID        sql.NullInt32
	AntennaTypeName string
}

func (q *Queries) GetAntennaById(ctx context.Context, id int32) (GetAntennaByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAntennaById, id)
	var i GetAntennaByIdRow
	err := row.Scan(
		&i.ID,
		&i.Serial,
		&i.AntennaTypeID,
		&i.PlayerID,
		&i.AntennaTypeName,
	)
	return i, err
}

const getAntennaBySerial = `-- name: GetAntennaBySerial :one
SELECT antenna.id, serial, antenna_type_id, player_id, antenna_type.name AS antenna_type_name
FROM antenna
JOIN antenna_type ON antenna_type.id = antenna.antenna_type_id
WHERE serial = ?
`

type GetAntennaBySerialRow struct {
	ID              int32
	Serial          string
	AntennaTypeID   int32
	PlayerID        sql.NullInt32
	AntennaTypeName string
}

func (q *Queries) GetAntennaBySerial(ctx context.Context, serial string) (GetAntennaBySerialRow, error) {
	row := q.db.QueryRowContext(ctx, getAntennaBySerial, serial)
	var i GetAntennaBySerialRow
	err := row.Scan(
		&i.ID,
		&i.Serial,
		&i.AntennaTypeID,
		&i.PlayerID,
		&i.AntennaTypeName,
	)
	return i, err
}

const getAntennaTypeIdByAntennaTypeName = `-- name: GetAntennaTypeIdByAntennaTypeName :one
SELECT id FROM antenna_type WHERE name = ?
`

func (q *Queries) GetAntennaTypeIdByAntennaTypeName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getAntennaTypeIdByAntennaTypeName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getAntennaTypeIdIsUnknown = `-- name: GetAntennaTypeIdIsUnknown :one
SELECT id FROM antenna_type WHERE name = 'unknown'
`

func (q *Queries) GetAntennaTypeIdIsUnknown(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getAntennaTypeIdIsUnknown)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const resetAntenna = `-- name: ResetAntenna :exec
DELETE FROM antenna
`

func (q *Queries) ResetAntenna(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAntenna)
	return err
}

const setAntennaTypeToAntennaBySerial = `-- name: SetAntennaTypeToAntennaBySerial :execresult
UPDATE antenna SET antenna_type_id = (SELECT id FROM antenna_type WHERE name = ?)
WHERE serial = ?
`

type SetAntennaTypeToAntennaBySerialParams struct {
	Name   string
	Serial string
}

func (q *Queries) SetAntennaTypeToAntennaBySerial(ctx context.Context, arg SetAntennaTypeToAntennaBySerialParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, setAntennaTypeToAntennaBySerial, arg.Name, arg.Serial)
}

const setPlayerIDToAntennaBySerial = `-- name: SetPlayerIDToAntennaBySerial :exec
UPDATE antenna SET player_id = ?,
                   antenna_type_id = (SELECT id FROM antenna_type WHERE name = 'player')
WHERE serial = ?
`

type SetPlayerIDToAntennaBySerialParams struct {
	PlayerID sql.NullInt32
	Serial   string
}

func (q *Queries) SetPlayerIDToAntennaBySerial(ctx context.Context, arg SetPlayerIDToAntennaBySerialParams) error {
	_, err := q.db.ExecContext(ctx, setPlayerIDToAntennaBySerial, arg.PlayerID, arg.Serial)
	return err
}
