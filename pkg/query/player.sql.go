// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: player.sql

package query

import (
	"context"
	"database/sql"
)

const addPlayer = `-- name: AddPlayer :one
INSERT INTO players (name, hand_type, equity)
VALUES (?, ?, ?)
RETURNING id, name, hand_type, hands, equity
`

type AddPlayerParams struct {
	Name     string
	HandType string
	Equity   sql.NullFloat64
}

func (q *Queries) AddPlayer(ctx context.Context, arg AddPlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, addPlayer, arg.Name, arg.HandType, arg.Equity)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HandType,
		&i.Hands,
		&i.Equity,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM players
WHERE name = ?
`

func (q *Queries) DeletePlayer(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, name)
	return err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, name, hand_type, hands, equity FROM players
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HandType,
		&i.Hands,
		&i.Equity,
	)
	return i, err
}

const getPlayerByHands = `-- name: GetPlayerByHands :one
SELECT id, name, hand_type, hands, equity FROM players
WHERE hands = ? LIMIT 1
`

func (q *Queries) GetPlayerByHands(ctx context.Context, hands string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerByHands, hands)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.HandType,
		&i.Hands,
		&i.Equity,
	)
	return i, err
}

const getPlayers = `-- name: GetPlayers :many
SELECT id, name, hand_type, hands, equity FROM players
`

func (q *Queries) GetPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, getPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.HandType,
			&i.Hands,
			&i.Equity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetPlayers = `-- name: ResetPlayers :exec
DELETE FROM players
`

func (q *Queries) ResetPlayers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetPlayers)
	return err
}
