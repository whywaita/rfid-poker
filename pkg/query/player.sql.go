// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: player.sql

package query

import (
	"context"
	"database/sql"
)

const addPlayer = `-- name: AddPlayer :one
INSERT INTO player (name)
VALUES (?)
RETURNING id, name
`

func (q *Queries) AddPlayer(ctx context.Context, name string) (Player, error) {
	row := q.db.QueryRowContext(ctx, addPlayer, name)
	var i Player
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPlayer = `-- name: GetPlayer :one
SELECT id, name FROM player
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, id int64) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayer, id)
	var i Player
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPlayerBySerial = `-- name: GetPlayerBySerial :one
SELECT player.id, player.name
FROM player
JOIN antenna ON player.id = antenna.player_id
WHERE antenna.serial = ?
`

func (q *Queries) GetPlayerBySerial(ctx context.Context, serial string) (Player, error) {
	row := q.db.QueryRowContext(ctx, getPlayerBySerial, serial)
	var i Player
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPlayersWithHand = `-- name: GetPlayersWithHand :many
SELECT
    player.id,
    player.name,
    hand.id AS hand_id,
    hand.equity,
    hand.is_muck,
    card_a.suit AS card_a_suit,
    card_a.rank AS card_a_rank,
    card_a.is_board AS card_a_is_board,
    card_b.suit AS card_b_suit,
    card_b.rank AS card_b_rank,
    card_b.is_board AS card_b_is_board
FROM player
         INNER JOIN hand ON player.id = hand.player_id
         INNER JOIN card AS card_a ON hand.id = card_a.hand_id
         INNER JOIN card AS card_b ON hand.id = card_b.hand_id
WHERE hand.is_muck = false
  AND card_a.id < card_b.id
`

type GetPlayersWithHandRow struct {
	ID           int64
	Name         string
	HandID       int64
	Equity       sql.NullFloat64
	IsMuck       bool
	CardASuit    string
	CardARank    string
	CardAIsBoard bool
	CardBSuit    string
	CardBRank    string
	CardBIsBoard bool
}

func (q *Queries) GetPlayersWithHand(ctx context.Context) ([]GetPlayersWithHandRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlayersWithHand)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlayersWithHandRow
	for rows.Next() {
		var i GetPlayersWithHandRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.HandID,
			&i.Equity,
			&i.IsMuck,
			&i.CardASuit,
			&i.CardARank,
			&i.CardAIsBoard,
			&i.CardBSuit,
			&i.CardBRank,
			&i.CardBIsBoard,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
